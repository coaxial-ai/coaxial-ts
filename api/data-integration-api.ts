/* tslint:disable */
/* eslint-disable */
/**
 * The Coaxial API
 * The Coaxial REST API. Please see https://docs.coaxial.ai for more details.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: team@coaxial.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { IntegrateCustomDatasetRequest } from '../models';
// @ts-ignore
import { IntegrateCustomDatasetResponse } from '../models';
// @ts-ignore
import { IntegratePineconeRequest } from '../models';
// @ts-ignore
import { IntegratePineconeResponse } from '../models';
// @ts-ignore
import { ListDataIntegrationsResponse } from '../models';
// @ts-ignore
import { RemoveDataIntegrationRequest } from '../models';
// @ts-ignore
import { RemoveDataIntegrationResponse } from '../models';
/**
 * DataIntegrationApi - axios parameter creator
 * @export
 */
export const DataIntegrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Integrate custom datasets
         * @param {IntegrateCustomDatasetRequest} integrateCustomDatasetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrateCustomDataset: async (integrateCustomDatasetRequest: IntegrateCustomDatasetRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrateCustomDatasetRequest' is not null or undefined
            assertParamExists('integrateCustomDataset', 'integrateCustomDatasetRequest', integrateCustomDatasetRequest)
            const localVarPath = `/data_integration/custom`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(integrateCustomDatasetRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Integrate pinecone datasets
         * @param {IntegratePineconeRequest} integratePineconeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integratePinecone: async (integratePineconeRequest: IntegratePineconeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integratePineconeRequest' is not null or undefined
            assertParamExists('integratePinecone', 'integratePineconeRequest', integratePineconeRequest)
            const localVarPath = `/data_integration/pinecone/integrate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(integratePineconeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List dataset integrations
         * @param {any} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDataIntegrations: async (userId?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/data_integration/list/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove dataset integrations
         * @param {RemoveDataIntegrationRequest} removeDataIntegrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDataIntegration: async (removeDataIntegrationRequest: RemoveDataIntegrationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'removeDataIntegrationRequest' is not null or undefined
            assertParamExists('removeDataIntegration', 'removeDataIntegrationRequest', removeDataIntegrationRequest)
            const localVarPath = `/data_integration/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeDataIntegrationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataIntegrationApi - functional programming interface
 * @export
 */
export const DataIntegrationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataIntegrationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Integrate custom datasets
         * @param {IntegrateCustomDatasetRequest} integrateCustomDatasetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async integrateCustomDataset(integrateCustomDatasetRequest: IntegrateCustomDatasetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrateCustomDatasetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.integrateCustomDataset(integrateCustomDatasetRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Integrate pinecone datasets
         * @param {IntegratePineconeRequest} integratePineconeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async integratePinecone(integratePineconeRequest: IntegratePineconeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegratePineconeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.integratePinecone(integratePineconeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List dataset integrations
         * @param {any} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDataIntegrations(userId?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDataIntegrationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDataIntegrations(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove dataset integrations
         * @param {RemoveDataIntegrationRequest} removeDataIntegrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeDataIntegration(removeDataIntegrationRequest: RemoveDataIntegrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoveDataIntegrationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeDataIntegration(removeDataIntegrationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DataIntegrationApi - factory interface
 * @export
 */
export const DataIntegrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataIntegrationApiFp(configuration)
    return {
        /**
         * 
         * @summary Integrate custom datasets
         * @param {IntegrateCustomDatasetRequest} integrateCustomDatasetRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrateCustomDataset(integrateCustomDatasetRequest: IntegrateCustomDatasetRequest, options?: any): AxiosPromise<IntegrateCustomDatasetResponse> {
            return localVarFp.integrateCustomDataset(integrateCustomDatasetRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Integrate pinecone datasets
         * @param {IntegratePineconeRequest} integratePineconeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integratePinecone(integratePineconeRequest: IntegratePineconeRequest, options?: any): AxiosPromise<IntegratePineconeResponse> {
            return localVarFp.integratePinecone(integratePineconeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List dataset integrations
         * @param {any} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDataIntegrations(userId?: any, options?: any): AxiosPromise<ListDataIntegrationsResponse> {
            return localVarFp.listDataIntegrations(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove dataset integrations
         * @param {RemoveDataIntegrationRequest} removeDataIntegrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeDataIntegration(removeDataIntegrationRequest: RemoveDataIntegrationRequest, options?: any): AxiosPromise<RemoveDataIntegrationResponse> {
            return localVarFp.removeDataIntegration(removeDataIntegrationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataIntegrationApi - object-oriented interface
 * @export
 * @class DataIntegrationApi
 * @extends {BaseAPI}
 */
export class DataIntegrationApi extends BaseAPI {
    /**
     * 
     * @summary Integrate custom datasets
     * @param {IntegrateCustomDatasetRequest} integrateCustomDatasetRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataIntegrationApi
     */
    public integrateCustomDataset(integrateCustomDatasetRequest: IntegrateCustomDatasetRequest, options?: AxiosRequestConfig) {
        return DataIntegrationApiFp(this.configuration).integrateCustomDataset(integrateCustomDatasetRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Integrate pinecone datasets
     * @param {IntegratePineconeRequest} integratePineconeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataIntegrationApi
     */
    public integratePinecone(integratePineconeRequest: IntegratePineconeRequest, options?: AxiosRequestConfig) {
        return DataIntegrationApiFp(this.configuration).integratePinecone(integratePineconeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List dataset integrations
     * @param {any} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataIntegrationApi
     */
    public listDataIntegrations(userId?: any, options?: AxiosRequestConfig) {
        return DataIntegrationApiFp(this.configuration).listDataIntegrations(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove dataset integrations
     * @param {RemoveDataIntegrationRequest} removeDataIntegrationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataIntegrationApi
     */
    public removeDataIntegration(removeDataIntegrationRequest: RemoveDataIntegrationRequest, options?: AxiosRequestConfig) {
        return DataIntegrationApiFp(this.configuration).removeDataIntegration(removeDataIntegrationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

