/* tslint:disable */
/* eslint-disable */
/**
 * The Coaxial API
 * The Coaxial REST API. Please see https://docs.coaxial.ai for more details.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: team@coaxial.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CheckAccessByResourceIdRequest } from '../models';
// @ts-ignore
import { CheckAccessForAllRequest } from '../models';
// @ts-ignore
import { GrantAccessRequest } from '../models';
// @ts-ignore
import { GrantAccessResponse } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { RevokeAccessRequest } from '../models';
// @ts-ignore
import { RevokeAccessResponse } from '../models';
/**
 * ProvisionApi - axios parameter creator
 * @export
 */
export const ProvisionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Check user access by resource id
         * @param {CheckAccessByResourceIdRequest} checkAccessByResourceIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAccessByResourceId: async (checkAccessByResourceIdRequest: CheckAccessByResourceIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'checkAccessByResourceIdRequest' is not null or undefined
            assertParamExists('checkAccessByResourceId', 'checkAccessByResourceIdRequest', checkAccessByResourceIdRequest)
            const localVarPath = `/provisions/can_user_access`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkAccessByResourceIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Check user access for many resources
         * @param {CheckAccessForAllRequest} checkAccessForAllRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAccessForAll: async (checkAccessForAllRequest: CheckAccessForAllRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'checkAccessForAllRequest' is not null or undefined
            assertParamExists('checkAccessForAll', 'checkAccessForAllRequest', checkAccessForAllRequest)
            const localVarPath = `/provisions/can_user_access_all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkAccessForAllRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Grant resource access to user
         * @param {GrantAccessRequest} grantAccessRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantAccess: async (grantAccessRequest: GrantAccessRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'grantAccessRequest' is not null or undefined
            assertParamExists('grantAccess', 'grantAccessRequest', grantAccessRequest)
            const localVarPath = `/provisions/add_to_user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(grantAccessRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Revoke resource access for user
         * @param {RevokeAccessRequest} revokeAccessRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAccess: async (revokeAccessRequest: RevokeAccessRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'revokeAccessRequest' is not null or undefined
            assertParamExists('revokeAccess', 'revokeAccessRequest', revokeAccessRequest)
            const localVarPath = `/provisions/remove_from_user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(revokeAccessRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProvisionApi - functional programming interface
 * @export
 */
export const ProvisionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProvisionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Check user access by resource id
         * @param {CheckAccessByResourceIdRequest} checkAccessByResourceIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkAccessByResourceId(checkAccessByResourceIdRequest: CheckAccessByResourceIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkAccessByResourceId(checkAccessByResourceIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Check user access for many resources
         * @param {CheckAccessForAllRequest} checkAccessForAllRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkAccessForAll(checkAccessForAllRequest: CheckAccessForAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkAccessForAll(checkAccessForAllRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Grant resource access to user
         * @param {GrantAccessRequest} grantAccessRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grantAccess(grantAccessRequest: GrantAccessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrantAccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.grantAccess(grantAccessRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Revoke resource access for user
         * @param {RevokeAccessRequest} revokeAccessRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeAccess(revokeAccessRequest: RevokeAccessRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RevokeAccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.revokeAccess(revokeAccessRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProvisionApi - factory interface
 * @export
 */
export const ProvisionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProvisionApiFp(configuration)
    return {
        /**
         * 
         * @summary Check user access by resource id
         * @param {CheckAccessByResourceIdRequest} checkAccessByResourceIdRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAccessByResourceId(checkAccessByResourceIdRequest: CheckAccessByResourceIdRequest, options?: any): AxiosPromise<any> {
            return localVarFp.checkAccessByResourceId(checkAccessByResourceIdRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Check user access for many resources
         * @param {CheckAccessForAllRequest} checkAccessForAllRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAccessForAll(checkAccessForAllRequest: CheckAccessForAllRequest, options?: any): AxiosPromise<any> {
            return localVarFp.checkAccessForAll(checkAccessForAllRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Grant resource access to user
         * @param {GrantAccessRequest} grantAccessRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grantAccess(grantAccessRequest: GrantAccessRequest, options?: any): AxiosPromise<GrantAccessResponse> {
            return localVarFp.grantAccess(grantAccessRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Revoke resource access for user
         * @param {RevokeAccessRequest} revokeAccessRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeAccess(revokeAccessRequest: RevokeAccessRequest, options?: any): AxiosPromise<RevokeAccessResponse> {
            return localVarFp.revokeAccess(revokeAccessRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProvisionApi - object-oriented interface
 * @export
 * @class ProvisionApi
 * @extends {BaseAPI}
 */
export class ProvisionApi extends BaseAPI {
    /**
     * 
     * @summary Check user access by resource id
     * @param {CheckAccessByResourceIdRequest} checkAccessByResourceIdRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisionApi
     */
    public checkAccessByResourceId(checkAccessByResourceIdRequest: CheckAccessByResourceIdRequest, options?: AxiosRequestConfig) {
        return ProvisionApiFp(this.configuration).checkAccessByResourceId(checkAccessByResourceIdRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Check user access for many resources
     * @param {CheckAccessForAllRequest} checkAccessForAllRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisionApi
     */
    public checkAccessForAll(checkAccessForAllRequest: CheckAccessForAllRequest, options?: AxiosRequestConfig) {
        return ProvisionApiFp(this.configuration).checkAccessForAll(checkAccessForAllRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Grant resource access to user
     * @param {GrantAccessRequest} grantAccessRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisionApi
     */
    public grantAccess(grantAccessRequest: GrantAccessRequest, options?: AxiosRequestConfig) {
        return ProvisionApiFp(this.configuration).grantAccess(grantAccessRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Revoke resource access for user
     * @param {RevokeAccessRequest} revokeAccessRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvisionApi
     */
    public revokeAccess(revokeAccessRequest: RevokeAccessRequest, options?: AxiosRequestConfig) {
        return ProvisionApiFp(this.configuration).revokeAccess(revokeAccessRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

