/* tslint:disable */
/* eslint-disable */
/**
 * The Coaxial API
 * The Coaxial REST API. Please see https://docs.coaxial.ai for more details.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: team@coaxial.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CallModelRequest } from '../models';
// @ts-ignore
import { CallModelResponse } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { IntegrateCustomModelRequest } from '../models';
// @ts-ignore
import { IntegrateCustomModelResponse } from '../models';
// @ts-ignore
import { IntegrateOpenaiRequest } from '../models';
// @ts-ignore
import { IntegrateOpenaiResponse } from '../models';
// @ts-ignore
import { ListModelIntegrationsResponse } from '../models';
// @ts-ignore
import { RemoveModelRequest } from '../models';
// @ts-ignore
import { RemoveModelResponse } from '../models';
/**
 * ModelIntegrationApi - axios parameter creator
 * @export
 */
export const ModelIntegrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add an identity header to LLM prompt
         * @param {CallModelRequest} callModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callModel: async (callModelRequest: CallModelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'callModelRequest' is not null or undefined
            assertParamExists('callModel', 'callModelRequest', callModelRequest)
            const localVarPath = `/llm_integration/include_identity/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(callModelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Integrate custom models
         * @param {IntegrateCustomModelRequest} integrateCustomModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrateCustomModel: async (integrateCustomModelRequest: IntegrateCustomModelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrateCustomModelRequest' is not null or undefined
            assertParamExists('integrateCustomModel', 'integrateCustomModelRequest', integrateCustomModelRequest)
            const localVarPath = `/llm_integration/custom_model`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(integrateCustomModelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Integrate OpenAI models
         * @param {IntegrateOpenaiRequest} integrateOpenaiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrateOpenai: async (integrateOpenaiRequest: IntegrateOpenaiRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'integrateOpenaiRequest' is not null or undefined
            assertParamExists('integrateOpenai', 'integrateOpenaiRequest', integrateOpenaiRequest)
            const localVarPath = `/llm_integration/openai`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(integrateOpenaiRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List models
         * @param {any} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelIntegrations: async (userId?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/llm_integration/list/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove models
         * @param {RemoveModelRequest} removeModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeModelIntegration: async (removeModelRequest: RemoveModelRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'removeModelRequest' is not null or undefined
            assertParamExists('removeModelIntegration', 'removeModelRequest', removeModelRequest)
            const localVarPath = `/llm_integration/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeModelRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModelIntegrationApi - functional programming interface
 * @export
 */
export const ModelIntegrationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModelIntegrationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add an identity header to LLM prompt
         * @param {CallModelRequest} callModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async callModel(callModelRequest: CallModelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CallModelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.callModel(callModelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Integrate custom models
         * @param {IntegrateCustomModelRequest} integrateCustomModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async integrateCustomModel(integrateCustomModelRequest: IntegrateCustomModelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrateCustomModelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.integrateCustomModel(integrateCustomModelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Integrate OpenAI models
         * @param {IntegrateOpenaiRequest} integrateOpenaiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async integrateOpenai(integrateOpenaiRequest: IntegrateOpenaiRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IntegrateOpenaiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.integrateOpenai(integrateOpenaiRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List models
         * @param {any} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listModelIntegrations(userId?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListModelIntegrationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listModelIntegrations(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Remove models
         * @param {RemoveModelRequest} removeModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeModelIntegration(removeModelRequest: RemoveModelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RemoveModelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeModelIntegration(removeModelRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ModelIntegrationApi - factory interface
 * @export
 */
export const ModelIntegrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModelIntegrationApiFp(configuration)
    return {
        /**
         * 
         * @summary Add an identity header to LLM prompt
         * @param {CallModelRequest} callModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        callModel(callModelRequest: CallModelRequest, options?: any): AxiosPromise<CallModelResponse> {
            return localVarFp.callModel(callModelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Integrate custom models
         * @param {IntegrateCustomModelRequest} integrateCustomModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrateCustomModel(integrateCustomModelRequest: IntegrateCustomModelRequest, options?: any): AxiosPromise<IntegrateCustomModelResponse> {
            return localVarFp.integrateCustomModel(integrateCustomModelRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Integrate OpenAI models
         * @param {IntegrateOpenaiRequest} integrateOpenaiRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        integrateOpenai(integrateOpenaiRequest: IntegrateOpenaiRequest, options?: any): AxiosPromise<IntegrateOpenaiResponse> {
            return localVarFp.integrateOpenai(integrateOpenaiRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List models
         * @param {any} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModelIntegrations(userId?: any, options?: any): AxiosPromise<ListModelIntegrationsResponse> {
            return localVarFp.listModelIntegrations(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Remove models
         * @param {RemoveModelRequest} removeModelRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeModelIntegration(removeModelRequest: RemoveModelRequest, options?: any): AxiosPromise<RemoveModelResponse> {
            return localVarFp.removeModelIntegration(removeModelRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ModelIntegrationApi - object-oriented interface
 * @export
 * @class ModelIntegrationApi
 * @extends {BaseAPI}
 */
export class ModelIntegrationApi extends BaseAPI {
    /**
     * 
     * @summary Add an identity header to LLM prompt
     * @param {CallModelRequest} callModelRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelIntegrationApi
     */
    public callModel(callModelRequest: CallModelRequest, options?: AxiosRequestConfig) {
        return ModelIntegrationApiFp(this.configuration).callModel(callModelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Integrate custom models
     * @param {IntegrateCustomModelRequest} integrateCustomModelRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelIntegrationApi
     */
    public integrateCustomModel(integrateCustomModelRequest: IntegrateCustomModelRequest, options?: AxiosRequestConfig) {
        return ModelIntegrationApiFp(this.configuration).integrateCustomModel(integrateCustomModelRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Integrate OpenAI models
     * @param {IntegrateOpenaiRequest} integrateOpenaiRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelIntegrationApi
     */
    public integrateOpenai(integrateOpenaiRequest: IntegrateOpenaiRequest, options?: AxiosRequestConfig) {
        return ModelIntegrationApiFp(this.configuration).integrateOpenai(integrateOpenaiRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List models
     * @param {any} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelIntegrationApi
     */
    public listModelIntegrations(userId?: any, options?: AxiosRequestConfig) {
        return ModelIntegrationApiFp(this.configuration).listModelIntegrations(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Remove models
     * @param {RemoveModelRequest} removeModelRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModelIntegrationApi
     */
    public removeModelIntegration(removeModelRequest: RemoveModelRequest, options?: AxiosRequestConfig) {
        return ModelIntegrationApiFp(this.configuration).removeModelIntegration(removeModelRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

